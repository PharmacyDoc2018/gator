// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addFeed = `-- name: AddFeed :one
INSERT INTO feeds (id, created_at, updated_at, name, url, user_id)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6
)
RETURNING id, created_at, updated_at, name, url, user_id
`

type AddFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) AddFeed(ctx context.Context, arg AddFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, addFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const deleteFeed = `-- name: DeleteFeed :exec
DELETE FROM feeds
WHERE url = $1
`

func (q *Queries) DeleteFeed(ctx context.Context, url string) error {
	_, err := q.db.ExecContext(ctx, deleteFeed, url)
	return err
}

const getFeed = `-- name: GetFeed :one
SELECT id, created_at, updated_at, name, url, user_id FROM feeds 
WHERE url = $1 LIMIT 1
`

func (q *Queries) GetFeed(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeed, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getFeeds = `-- name: GetFeeds :many
SELECT feeds.name, url, users.name FROM feeds
INNER JOIN users
ON feeds.user_id = users.id
`

type GetFeedsRow struct {
	Name   string
	Url    string
	Name_2 string
}

func (q *Queries) GetFeeds(ctx context.Context) ([]GetFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsRow
	for rows.Next() {
		var i GetFeedsRow
		if err := rows.Scan(&i.Name, &i.Url, &i.Name_2); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFeedsOwned = `-- name: GetFeedsOwned :many
SELECT feeds.name FROM feeds
WHERE feeds.user_id = $1
`

func (q *Queries) GetFeedsOwned(ctx context.Context, userID uuid.UUID) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getFeedsOwned, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isOwnerFeed = `-- name: IsOwnerFeed :one
SELECT EXISTS (
    SELECT 1 FROM feeds
    WHERE user_id = $1
    AND feeds.url = $2
)
`

type IsOwnerFeedParams struct {
	UserID uuid.UUID
	Url    string
}

func (q *Queries) IsOwnerFeed(ctx context.Context, arg IsOwnerFeedParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isOwnerFeed, arg.UserID, arg.Url)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateFeedOwner = `-- name: UpdateFeedOwner :exec
UPDATE feeds
SET 
    user_id = $1,
    updated_at = $2
WHERE id = $3
`

type UpdateFeedOwnerParams struct {
	UserID    uuid.UUID
	UpdatedAt time.Time
	ID        uuid.UUID
}

func (q *Queries) UpdateFeedOwner(ctx context.Context, arg UpdateFeedOwnerParams) error {
	_, err := q.db.ExecContext(ctx, updateFeedOwner, arg.UserID, arg.UpdatedAt, arg.ID)
	return err
}
