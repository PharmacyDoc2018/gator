// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :many
WITH inserted_feed_follow AS (
    INSERT INTO feed_follows (id, created_at, updated_at, user_id, feed_id)
    VALUES (
        $1,
        $2,
        $3,
        $4,
        $5
    )
    RETURNING id, created_at, updated_at, user_id, feed_id
)
SELECT (
    inserted_feed_follow.*,
    feeds.name,
    users.name
)
FROM inserted_feed_follow
INNER JOIN users 
ON inserted_feed_follow.user_id = users.id
INNER JOIN feeds
ON inserted_feed_follow.feed_id = feeds.id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) ([]interface{}, error) {
	rows, err := q.db.QueryContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var column_1 interface{}
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteFollow = `-- name: DeleteFollow :exec
DELETE FROM feed_follows
USING feeds
WHERE feed_follows.feed_id = feeds.id
AND feed_follows.user_id = $1
AND feeds.url = $2
`

type DeleteFollowParams struct {
	UserID uuid.UUID
	Url    string
}

func (q *Queries) DeleteFollow(ctx context.Context, arg DeleteFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFollow, arg.UserID, arg.Url)
	return err
}

const deleteFollowByID = `-- name: DeleteFollowByID :exec
DELETE FROM feed_follows
WHERE id = $1
`

func (q *Queries) DeleteFollowByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteFollowByID, id)
	return err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
SELECT feeds.name, users.name 
FROM feed_follows
INNER JOIN feeds
ON feed_follows.feed_id = feeds.id
INNER JOIN users
ON feeds.user_id = users.id
WHERE feed_follows.user_id = $1
`

type GetFeedFollowsForUserRow struct {
	Name   string
	Name_2 string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID uuid.UUID) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(&i.Name, &i.Name_2); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLongestFollowerForFeed = `-- name: GetLongestFollowerForFeed :one
SELECT feed_follows.id, feeds.id, users.id
FROM feed_follows
JOIN users ON feed_follows.user_id = users.id
JOIN feeds on feed_follows.feed_id = feeds.id
WHERE feeds.url = $1
ORDER BY feed_follows.created_at ASC
LIMIT 1
`

type GetLongestFollowerForFeedRow struct {
	ID   uuid.UUID
	ID_2 uuid.UUID
	ID_3 uuid.UUID
}

func (q *Queries) GetLongestFollowerForFeed(ctx context.Context, url string) (GetLongestFollowerForFeedRow, error) {
	row := q.db.QueryRowContext(ctx, getLongestFollowerForFeed, url)
	var i GetLongestFollowerForFeedRow
	err := row.Scan(&i.ID, &i.ID_2, &i.ID_3)
	return i, err
}

const isFollowingFeed = `-- name: IsFollowingFeed :one
SELECT EXISTS (
    SELECT 1 FROM feed_follows
    INNER JOIN feeds 
    ON feed_follows.feed_id = feeds.id
    WHERE feed_follows.user_id = $1
    AND feeds.url = $2
)
`

type IsFollowingFeedParams struct {
	UserID uuid.UUID
	Url    string
}

func (q *Queries) IsFollowingFeed(ctx context.Context, arg IsFollowingFeedParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isFollowingFeed, arg.UserID, arg.Url)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
